rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // User progress - users can read/write their own progress, admins can read/write all
    match /userProgress/{userId} {
      // Allow admins to list all userProgress docs
      allow list: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.subscriptionPlan == 'admin';
      // Allow users to read/write their own progress, admins can read/write all
      allow read, write: if request.auth != null && (
        request.auth.uid == userId ||
        (
          exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.subscriptionPlan == 'admin'
        )
      );
    }
    
    // Programs collection - access based on subscription
    match /programs/{programId} {
      // Allow all authenticated users to read all programs
      allow read: if request.auth != null;
      // Only admins can write to programs (restrict to specific fields)
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.subscriptionPlan == 'admin' &&
        (
          request.method == 'create' ||
          (
            request.method == 'update' &&
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['title', 'duration', 'price', 'description', 'videos', 'order'])
          )
        );
    }
    
    // Payments collection - users can read their own payments, admins can read all
    match /payments/{paymentId} {
      allow read: if request.auth != null && (
        // User can read their own payments
        resource.data.userId == request.auth.uid ||
        // Admin can read all payments
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.subscriptionPlan == 'admin')
      );
      
      // Allow creating payment records during successful transactions
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['userId', 'userEmail', 'plan', 'amount', 'currency', 'reference', 'status', 'createdAt']);
      
      // Only admins can update payment records
      allow update: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.subscriptionPlan == 'admin';
    }
    
    // Contacts collection - authenticated users can create, admins can read
    match /contacts/{contactId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.subscriptionPlan == 'admin';
    }
    
    // Quiz results - users can read/write their own results
    match /quizResults/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Allow admins to read all quiz results
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.subscriptionPlan == 'admin';
    }

    // Quizzes collection - handle non-existent documents gracefully
    match /quizzes/{quizId} {
      // Allow any authenticated user to read beginner quiz (even if it doesn't exist)
      allow read: if request.auth != null && quizId == 'beginner';

      // Admin access to all quizzes
      allow read: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.subscriptionPlan == 'admin';

      // Intermediate quiz access
      allow read: if request.auth != null &&
        quizId == 'intermediate' &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.subscriptionStatus == 'active' &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.subscriptionEnd > request.time &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.subscriptionPlan in ['intermediate', 'advanced'];

      // Advanced quiz access
      allow read: if request.auth != null &&
        quizId == 'advanced' &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.subscriptionStatus == 'active' &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.subscriptionEnd > request.time &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.subscriptionPlan == 'advanced';

      // Admins can write/manage quizzes
      allow write: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.subscriptionPlan == 'admin';
    }

    // Main user profile collection - SECURE VERSION
    match /users/{userId} {
      // Allow user to read their own document
      allow read: if request.auth != null && request.auth.uid == userId;

      // Allow admins to read all user data
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.subscriptionPlan == 'admin';

      // Allow admins to update any user's data
      allow update: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.subscriptionPlan == 'admin';

      // Allow user creation during registration with safe fields
      allow create: if request.auth != null &&
        request.auth.uid == userId &&
        (!request.resource.data.keys().hasAny(['role']) &&
         (!request.resource.data.keys().hasAny(['subscriptionPlan']) ||
          request.resource.data.subscriptionPlan == 'legacyFree'));

      // Allow setting provider field during authentication
      allow update: if request.auth != null &&
        request.auth.uid == userId &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['provider']);

      // Allow updates to safe fields only (protect critical fields)
      allow update: if request.auth != null &&
        request.auth.uid == userId &&
        !request.resource.data.diff(resource.data).affectedKeys().hasAny([
          'role',
          'subscriptionPlan',
          'subscriptionStatus',
          'subscriptionStart',
          'subscriptionEnd'
        ]);

      // Allow controlled updates to lastActiveAt only
      allow update: if request.auth != null &&
        request.auth.uid == userId &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastActiveAt']) &&
        request.resource.data.lastActiveAt == request.time;

      // Disallow deletes from the client
      allow delete: if false;
    }
  }
}
